@model VegaModel.VegetableModel
@{

    ViewBag.Title = "Create Vegetable";
}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="container">
         <div class="col-md-6 my-3">
            <div class="card card-outline-secondary">
                <div class="card-body">
                    <div class="text-center">
                        <h4>Add Inventory</h4>
                    </div>
                   <hr />
                   <form class="form" role="form" autocomplete="off">
                       @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                       <div class="form-group row">
                           @Html.Label("Inventory Name", htmlAttributes: new { @class = "col-lg-4 col-form-label form-control-label" })
                           <div class="col-lg-6">
                               @Html.EditorFor(model => model.Vegetable, new { htmlAttributes = new { @class = "form-control", @id = "textVegname", onBlur = "CheckAvailability()" } })
                               @Html.ValidationMessageFor(model => model.Vegetable, "", new { @class = "text-danger" })
                               <span id="message" class="field-validation-valid" data-valmsg-for="txtMerge" data-valmsg-replace="true"></span>
                           </div>
                       </div>
                       <div class="form-group row">
                           @Html.Label("Commission", htmlAttributes: new { @class = "col-lg-4 col-form-label form-control-label" })
                           <div class="col-lg-6">
                               @Html.EditorFor(model => model.Arhat, new { htmlAttributes = new { @class = "form-control" } })
                               @Html.ValidationMessageFor(model => model.Arhat, "", new { @class = "text-danger" })
                           </div>
                       </div>

                       <div class="form-group row">
                           @Html.Label("Labour Charges", htmlAttributes: new { @class = "col-lg-4 col-form-label form-control-label" })
                           <div class="col-lg-6">
                               @Html.EditorFor(model => model.Laga, new { htmlAttributes = new { @class = "form-control" } })
                               @Html.ValidationMessageFor(model => model.Laga, "", new { @class = "text-danger" })
                           </div>
                       </div>

                       <div class="form-group row">
                           @Html.Label("RDF-Fees", htmlAttributes: new { @class = "col-lg-4 col-form-label form-control-label" })
                           <div class="col-lg-6">
                               @Html.EditorFor(model => model.RDF, new { htmlAttributes = new { @class = "form-control" } })
                               @Html.ValidationMessageFor(model => model.RDF, "", new { @class = "text-danger" })
                           </div>
                       </div>

                       <div class="form-group row">
                           @Html.Label("MDF-Fees", htmlAttributes: new { @class = "col-lg-4 col-form-label form-control-label" })
                           <div class="col-lg-6">
                               @Html.EditorFor(model => model.MDF, new { htmlAttributes = new { @class = "form-control" } })
                               @Html.ValidationMessageFor(model => model.MDF, "", new { @class = "text-danger" })
                           </div>
                       </div>

                       <div class="form-group row">
                           @Html.Label("Wrapping Charges", htmlAttributes: new { @class = "col-lg-4 col-form-label form-control-label" })
                           <div class="col-lg-6">
                               @Html.EditorFor(model => model.Bardana, new { htmlAttributes = new { @class = "form-control" } })
                               @Html.ValidationMessageFor(model => model.Bardana, "", new { @class = "text-danger" })
                           </div>
                       </div>
                       <div class="form-group row">
                           <div class="col-lg-1">
                               <div class="checkbox">
                                   @Html.EditorFor(model => model.Crate)
                                   @Html.ValidationMessageFor(model => model.Crate, "", new { @class = "form-check-input" })
                               </div>
                           </div>
                           <div class="col-lg-8">
                               <label for="@Html.NameFor(x => x.Crate)">Is in Container</label>
                           </div>
                       </div>

                       @*<div class="form-group row">
                           @Html.LabelFor(model => model.Crate, htmlAttributes: new { @class = "col-lg-3 col-form-label form-control-label" })
                           <div class="col-lg-6">
                               <div class="checkbox">
                                   @Html.EditorFor(model => model.Crate)
                                   @Html.ValidationMessageFor(model => model.Crate, "", new { @class = "form-check-input" })
                               </div>
                           </div>
                       </div>*@
                       <hr />
                       <div class="form-group row">
                           <div class="col-md-offset-2 col-md-10 ">
                               <input type="submit" value="Create" class="btn btn-primary" />
                               <a href='@Url.Action("Index", "Vegetable")' class="btn btn-primary">Back To List</a>
                           </div>

                       </div>
                   </form>
                </div>
            </div>
        </div>
    </div>
}
<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
@section Scripts {
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/jqueryval")

<script type="text/javascript">
    function CheckAvailability() {
        var vegetable = $("#textVegname").val();
        $.ajax({
            type: "POST",
            url: "/Vegetable/IsVegNameExists",
            data: '{vegetable: "' + vegetable + '" }',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                var message = $("#message");
                if (response) {
                    message.css("color", "red");
                    message.html("Vegetable is NOT available");
                     }
                else {
                           message.html("");
                }
            }
        });
    };
</script>


}
